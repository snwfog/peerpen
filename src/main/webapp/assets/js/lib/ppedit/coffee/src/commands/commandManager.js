// Generated by CoffeeScript 1.7.1

/*
Class that manages a set of commands to undo/redo.
 */
var CommandManager;

CommandManager = (function() {
  function CommandManager() {
    this.undoStack = [];
    this.redoStack = [];
  }


  /*
  Inserts the passed command into the undo stack
  flow. This method executes the command by default, set
  the execute argument to false in order to prevent that behavior.
   */

  CommandManager.prototype.pushCommand = function(command, execute) {
    if ((execute == null) || execute) {
      command.execute();
    }
    this.undoStack.push(command);
    return this.redoStack.splice(0, this.redoStack.length);
  };


  /*
  Undo the last executed command
   */

  CommandManager.prototype.undo = function() {
    var lastCommand;
    if (this.undoStack.length > 0) {
      lastCommand = this.undoStack.pop();
      lastCommand.undo();
      return this.redoStack.push(lastCommand);
    }
  };


  /*
  Redo the last executed command
   */

  CommandManager.prototype.redo = function() {
    var redoCommand;
    if (this.redoStack.length > 0) {
      redoCommand = this.redoStack.pop();
      redoCommand.execute();
      return this.undoStack.push(redoCommand);
    }
  };


  /*
  Returns a json string specifying the boxes that have been created, modified and/or removed.
   */

  CommandManager.prototype.getUndoJSON = function() {
    var boxid, command, createdBoxes, hunkId, id, modifiedBoxes, removedBoxes, result, shaObj, value, _i, _j, _len, _len1, _ref, _ref1;
    modifiedBoxes = {};
    createdBoxes = {};
    removedBoxes = {};
    _ref = this.undoStack;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      command = _ref[_i];
      _ref1 = command.boxIds;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        id = _ref1[_j];
        switch (command.getType()) {
          case 'Create':
            createdBoxes['' + id] = {
              html: $('#' + id).clone().wrap('<div></div>').parent().html() || '',
              pageNum: command.getPageNum()
            };
            break;
          case 'Modify':
            if (createdBoxes['' + id] == null) {
              modifiedBoxes['' + id] = $('#' + id).clone().wrap('<div></div>').parent().html() || '';
            }
            break;
          case 'Remove':
            delete modifiedBoxes['' + id];
            if (createdBoxes['' + id] != null) {
              delete createdBoxes['' + id];
            } else {
              removedBoxes['' + id] = '';
            }
        }
      }
    }
    result = {
      modified: (function() {
        var _results;
        _results = [];
        for (boxid in modifiedBoxes) {
          value = modifiedBoxes[boxid];
          _results.push({
            id: boxid,
            html: value
          });
        }
        return _results;
      })(),
      removed: (function() {
        var _results;
        _results = [];
        for (boxid in removedBoxes) {
          value = removedBoxes[boxid];
          _results.push({
            id: boxid,
            html: value
          });
        }
        return _results;
      })(),
      created: [[], []]
    };
    for (boxid in createdBoxes) {
      value = createdBoxes[boxid];
      result.created[value.pageNum].push({
        id: boxid,
        html: value.html
      });
    }
    shaObj = new jsSHA(JSON.stringify(result), "TEXT");
    hunkId = shaObj.getHMAC("", "TEXT", "SHA-256", "HEX");
    result.etag = hunkId;
    return JSON.stringify(result);
  };


  /*
  Deletes the history of commands issued since the editor has been loaded.
   */

  CommandManager.prototype.clearHistory = function() {
    return this.undoStack.splice(0, this.undoStack.length);
  };

  return CommandManager;

})();
