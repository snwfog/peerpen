// Generated by CoffeeScript 1.7.1
var Box,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Box = (function(_super) {
  __extends(Box, _super);

  Box.CLICK_TIME_MILLIS = 200;

  Box.DBLCLICK_TIME_MILLIS = 200;

  function Box(root, options) {
    this.root = root;
    this.options = options;
    Box.__super__.constructor.call(this, this.root);
    this.helper = new BoxHelper(this);
    this.prevPosition = void 0;
    this.prevMouseDownTime = 0;
    this.clickCount = 0;
    this.prevMouseUpTime = 0;
    this.clickTimeoutId = 0;
  }

  Box.prototype.buildElement = function() {
    var boxs, highestZIndex, settings;
    highestZIndex = void 0;
    boxs = this.root.find('.ppedit-box');
    if (boxs.length > 0) {
      highestZIndex = 0;
      boxs.each(function(index, nodeElement) {
        return highestZIndex = Math.max(highestZIndex, parseInt($(nodeElement).css('z-index')));
      });
    }
    settings = $.extend({
      left: '50px',
      top: '50px',
      width: '75px',
      height: '50px',
      color: 'black',
      'font-family': 'Times New Roman',
      'font-size': '12pt',
      'font-weight': 'normal',
      'text-decoration': 'none',
      'font-style': 'normal',
      'z-index': highestZIndex != null ? highestZIndex + 1 : 0,
      'text-align': 'left',
      'vertical-align': 'bottom'
    }, this.options);
    return this.element = $('<div></div>').addClass('ppedit-box').attr('contenteditable', true).attr('id', $.now()).css(settings);
  };

  Box.prototype.bindEvents = function() {
    this.element.mousedown((function(_this) {
      return function(event) {
        event.stopPropagation();
        event.preventDefault();
        _this.select();
        return _this.prevMouseDownTime = event.timeStamp;
      };
    })(this)).mouseup((function(_this) {
      return function(event) {
        event.preventDefault();
        if (event.timeStamp - _this.prevMouseDownTime < Box.CLICK_TIME_MILLIS) {
          _this.clickCount++;
          if (_this.clickTimeoutId === 0) {
            _this.clickTimeoutId = setTimeout((function() {
              if (_this.clickCount === 1) {
                _this._onClick();
              } else if (_this.clickCount >= 2) {
                _this._onDoubleClick();
              }
              _this.clickTimeoutId = 0;
              return _this.clickCount = 0;
            }), Box.DBLCLICK_TIME_MILLIS);
          }
        }
        return _this.stopMoving();
      };
    })(this)).click((function(_this) {
      return function(event) {
        event.stopPropagation();
        return event.preventDefault();
      };
    })(this)).dblclick((function(_this) {
      return function(event) {
        event.stopPropagation();
        event.preventDefault();
        console.log(_this.root.parent());
        return _this.root.parent().find(".FontPanel").css("visibility", "");
      };
    })(this)).focus((function(_this) {
      return function(event) {
        return _this.element.trigger('boxSelected', [_this]);
      };
    })(this)).on('containerMouseMove', (function(_this) {
      return function(event, mouseMoveEvent, delta) {
        if (event.target === _this.element.get(0)) {
          if (_this.element.hasClass('ppedit-box-selected') && (delta != null)) {
            return _this.move(delta.x, delta.y);
          }
        }
      };
    })(this)).on('containerMouseLeave', (function(_this) {
      return function() {
        return _this.stopMoving();
      };
    })(this)).on('containerMouseUp', (function(_this) {
      return function(event, mouseMoveEvent) {
        return _this.stopMoving();
      };
    })(this)).on('containerKeyDown', (function(_this) {
      return function(event, keyDownEvent) {
        if (_this.element.hasClass('ppedit-box-selected')) {
          return _this._processKeyDownEvent(keyDownEvent);
        }
      };
    })(this)).keydown((function(_this) {
      return function(event) {
        if (!_this.isFocused()) {
          return _this._processKeyDownEvent(event);
        }
      };
    })(this));
    return this.helper.bindEvents();
  };


  /*
  Matches directional arrows event
  to pixel-by-pixel movement
   */

  Box.prototype._processKeyDownEvent = function(event) {
    var moved, previousPosition;
    previousPosition = this.currentPosition();
    moved = false;
    if (event.which === 37) {
      event.preventDefault();
      moved = true;
      this.move(-1, 0);
    }
    if (event.which === 38) {
      event.preventDefault();
      moved = true;
      this.move(0, -1);
    }
    if (event.which === 39) {
      event.preventDefault();
      moved = true;
      this.move(1, 0);
    }
    if (event.which === 40) {
      event.preventDefault();
      moved = true;
      this.move(0, 1);
    }
    if (moved) {
      return this.element.trigger('boxMoved', [this, this.currentPosition(), previousPosition]);
    }
  };


  /*
  Deselects the box
   */

  Box.prototype.stopMoving = function() {
    this.element.removeClass('ppedit-box-selected');
    if ((this.prevPosition != null) && !Geometry.pointEqualToPoint(this.currentPosition(), this.prevPosition)) {
      if ($(document).find('.snapImg').hasClass('snapBtn-selected')) {
        this.snap();
      }
      this.root.trigger('boxMoved', [this, $.extend(true, {}, this.currentPosition()), $.extend(true, {}, this.prevPosition)]);
    }
    this.prevPosition = void 0;
    if ($(document).find('.snapImg').hasClass('snapBtn-selected')) {
      this.root.find('.hDotLine').removeClass('ppedit-hDotLine');
      this.root.find('.vDotLine').removeClass('ppedit-vDotLine');
    }
    return this.root.parent().find(".FontPanel").css("visibility", "hidden");
  };


  /*
  Moves the box by the passed delta amounts.
   */

  Box.prototype.move = function(deltaX, deltaY) {
    var currentPos, dotLinePos;
    currentPos = this.currentPosition();
    this.setPosition(deltaX + currentPos.left, deltaY + currentPos.top);
    dotLinePos = this.getSnapPosition(this.currentPosition());
    if ($(document).find('.snapImg').hasClass('snapBtn-selected')) {
      this.root.find('.hDotLine').addClass('ppedit-hDotLine').css('top', dotLinePos.top);
      return this.root.find('.vDotLine').addClass('ppedit-vDotLine').css('left', dotLinePos.left);
    }
  };


  /*
  Sets the position of the box to the passed coordinates
   */

  Box.prototype.setPosition = function(x, y) {
    this.element.css('left', x + 'px');
    return this.element.css('top', y + 'px');
  };


  /*
  Returns the current position of the box.
   */

  Box.prototype.currentPosition = function() {
    return this.element.position();
  };


  /*
  Sets the position of the box to the nearest snapping
  position.
   */

  Box.prototype.snap = function() {
    var snappedPosition;
    snappedPosition = this.getSnapPosition(this.currentPosition());
    return this.setPosition(snappedPosition.left, snappedPosition.top);
  };


  /*
  Returns the coordinates of the snapping position nearest
  to the box.
   */

  Box.prototype.getSnapPosition = function(p) {
    var snapedLeft, snapedTop;
    snapedLeft = parseInt(p.left / 8) * 8;
    snapedTop = parseInt(p.top / 8) * 8;
    return {
      left: snapedLeft,
      top: snapedTop
    };
  };


  /*
  Marks the box as selected
   */

  Box.prototype.select = function() {
    this.element.addClass('ppedit-box-selected');
    return this.prevPosition = this.currentPosition();
  };


  /*
  Returns true if the element is currently focused, false otherwise
   */

  Box.prototype.isFocused = function() {
    return this.element.get(0) === document.activeElement;
  };


  /*
  Puts the box on focus.
   */

  Box.prototype._enableFocus = function() {
    this.root.find('.ppedit-box').removeClass('ppedit-box-focus').removeClass('ppedit-box-selected');
    return this.element.addClass('ppedit-box-focus').focus();
  };


  /*
  Adds an unordered point list at the current position
  of the cursor in the box
   */

  Box.prototype.addBulletPoint = function() {
    return this._addHtml($('<ul><li></li></ul>'));
  };


  /*
  Adds an ordered list at the current position
  of the cursor in the box
   */

  Box.prototype.addOrderedPointList = function() {
    return this._addHtml($('<ol><li></li></ol>'));
  };

  Box.prototype._addHtml = function(htmlSelector) {
    var editedElement;
    editedElement = $(window.getSelection().getRangeAt(0).startContainer.parentNode);
    if (editedElement.closest('.ppedit-box').length === 0) {
      editedElement = this.element;
    }
    htmlSelector.find('li').html(editedElement.html());
    return editedElement.empty().append(htmlSelector);
  };

  Box.prototype._getCursorPosition = function() {
    return window.getSelection().getRangeAt(0).startOffset;
  };

  Box.prototype._onClick = function() {};

  Box.prototype._onDoubleClick = function() {
    return this._enableFocus();
  };

  return Box;

})(Graphic);
