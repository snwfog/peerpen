// Generated by CoffeeScript 1.7.1

/*
A command that populates the editor with the boxes
information defined in a json string.
 */
var LoadBoxesCommand,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoadBoxesCommand = (function(_super) {
  __extends(LoadBoxesCommand, _super);


  /*
  Defines a command that, when executed, populates the editor with the boxes
  information defined in the passed json string.
  
  The jsonBoxes parameter must be a json string like the following :
  [
    {
      "box-id-1":'<div class="ppedit-box">box-id-1 contents in page 1</div>',
      "box-id-2":'<div class="ppedit-box">box-id-2 contents in page 1</div>'
    },
    {
      "box-id-3":'<div class="ppedit-box">box-id-3 contents in page 2</div>',
      "box-id-4":'<div class="ppedit-box">box-id-4 contents in page 2</div>'
    }
  ]
   */

  function LoadBoxesCommand(editor, jsonBoxes) {
    this.editor = editor;
    this.jsonBoxes = jsonBoxes;
    LoadBoxesCommand.__super__.constructor.call(this);
  }

  LoadBoxesCommand.prototype.execute = function() {
    var area, box, boxElement, i, id, pages, panel, rows, _i, _ref, _results;
    pages = JSON.parse(this.jsonBoxes);
    _results = [];
    for (i = _i = 0, _ref = pages.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _ref1, _results1;
        _ref1 = pages[i];
        _results1 = [];
        for (id in _ref1) {
          boxElement = _ref1[id];
          area = this.editor.areas[i];
          panel = this.editor.panel;
          box = new Box(area.boxesContainer.element);
          box.element = $(boxElement);
          area.boxesContainer.addBox(box);
          rows = panel.getRows(i);
          if (rows.length === 0) {
            _results1.push(panel.addBoxRow(id));
          } else {
            _results1.push(rows.each((function(_this) {
              return function(index, rowNode) {
                var otherBoxId, otherBoxZIndex;
                otherBoxId = $(rowNode).attr('ppedit-box-id');
                otherBoxZIndex = area.boxesContainer.boxes[otherBoxId].element.css('z-index');
                if (parseInt(otherBoxZIndex) < parseInt(box.element.css('z-index')) || index === rows.length - 1) {
                  panel.addBoxRow(id, index);
                  return false;
                }
              };
            })(this)));
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  LoadBoxesCommand.prototype.undo = function() {};

  LoadBoxesCommand.prototype.getType = function() {
    return 'Create';
  };

  LoadBoxesCommand.prototype.getPageNum = function() {};

  return LoadBoxesCommand;

})(Command);
