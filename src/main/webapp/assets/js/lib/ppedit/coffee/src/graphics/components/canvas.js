// Generated by CoffeeScript 1.7.1

/*
This graphic contains a canvas element used for drawing
figures dynamically on the browser.
 */
var Canvas,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Canvas = (function(_super) {
  __extends(Canvas, _super);

  function Canvas(root) {
    this.root = root;
    Canvas.__super__.constructor.call(this, this.root);
    this.downPosition = void 0;
    this.rectSize = void 0;
    this._context = void 0;
  }

  Canvas.prototype.buildElement = function() {
    return this.element = $('<canvas></canvas>').addClass('ppedit-canvas').attr('width', '920px').attr('height', '1325px');
  };

  Canvas.prototype.bindEvents = function() {
    this.element.on('containerMouseDown', (function(_this) {
      return function(event, mouseEvent) {
        _this.downPosition = {
          left: mouseEvent.offsetX,
          top: mouseEvent.offsetY
        };
        return _this.rectSize = {
          width: 0,
          height: 0
        };
      };
    })(this)).on('containerMouseMove', (function(_this) {
      return function(event, mouseMoveEvent, delta) {
        if ((_this.downPosition != null) && (_this.rectSize != null) && (delta != null)) {
          _this.rectSize.width += delta.x;
          _this.rectSize.height += delta.y;
          return _this.drawRect(_this.downPosition, _this.rectSize);
        }
      };
    })(this)).on('containerMouseLeave', (function(_this) {
      return function() {
        return _this.clear();
      };
    })(this)).on('containerMouseUp', (function(_this) {
      return function() {
        if ((_this.downPosition != null) && (_this.rectSize != null)) {
          _this.root.trigger('canvasRectSelect', [
            {
              topLeft: _this.downPosition,
              size: _this.rectSize
            }
          ]);
        }
        return _this.clear();
      };
    })(this));
    return this._context = this.element.get(0).getContext('2d');
  };


  /*
  Draws a rectangle at the passed coordinate
   */

  Canvas.prototype.drawRect = function(topLeft, size) {
    this._context.clearRect(0, 0, this.element.width(), this.element.height());
    this._context.globalAlpha = 0.2;
    this._context.beginPath();
    this._context.rect(topLeft.left, topLeft.top, size.width, size.height);
    this._context.fillStyle = 'blue';
    return this._context.fill();
  };


  /*
  Clears the canvas of any drawn figures.
   */

  Canvas.prototype.clear = function() {
    this._context.clearRect(0, 0, this.element.width(), this.element.height());
    this.downPosition = void 0;
    return this.rectSize = void 0;
  };

  return Canvas;

})(Graphic);
