// Generated by CoffeeScript 1.7.1

/*
A graphic acting as a container of a boxesContainer, a canvas and a grid.
 */
var EditArea,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EditArea = (function(_super) {
  __extends(EditArea, _super);

  function EditArea(root, pageNum) {
    this.root = root;
    this.pageNum = pageNum;
    EditArea.__super__.constructor.call(this, this.root);
    this.prevMouseMoveEvent = void 0;
    this.canvas = void 0;
    this.grid = void 0;
    this.boxesContainer = void 0;
    this.fontPanel = void 0;
  }

  EditArea.prototype.buildElement = function() {
    this.element = $('<div class="editContainer shadow-effect"></div>').attr('id', 'ppedit-page-' + this.pageNum).append('<div></div>').addClass("ppedit-container").addClass("col-xs-8").attr('tabindex', 0);
    this.boxesContainer = new BoxesContainer(this.element);
    this.canvas = new Canvas(this.element);
    this.grid = new Grid(this.element);
    this.fontPanel = new FontPanel(this.element);
    this.boxesContainer.buildElement();
    this.canvas.buildElement();
    this.grid.buildElement();
    this.fontPanel.buildElement();
    this.element.append(this.boxesContainer.element);
    this.element.append(this.canvas.element);
    this.element.append(this.grid.element);
    return this.element.append(this.fontPanel.element);
  };

  EditArea.prototype.bindEvents = function() {
    this.element.mousedown((function(_this) {
      return function() {
        if (_this.boxesContainer.getNotFocusedSelectedBoxes().length === 0) {
          return _this.canvas.element.trigger('containerMouseDown', [event]);
        }
      };
    })(this)).mousemove((function(_this) {
      return function(event) {
        var delta;
        delta = void 0;
        if (_this.prevMouseMoveEvent != null) {
          delta = {
            x: event.clientX - _this.prevMouseMoveEvent.clientX,
            y: event.clientY - _this.prevMouseMoveEvent.clientY
          };
        }
        _this.element.find('*').trigger('containerMouseMove', [event, delta]);
        return _this.prevMouseMoveEvent = event;
      };
    })(this)).mouseleave((function(_this) {
      return function() {
        _this.element.find('*').trigger('containerMouseLeave');
        return _this.prevMouseMoveEvent = void 0;
      };
    })(this)).mouseup((function(_this) {
      return function(event) {
        _this.element.find('*').trigger('containerMouseUp', [event]);
        return _this.prevMouseMoveEvent = void 0;
      };
    })(this)).keydown((function(_this) {
      return function(event) {
        return _this.element.find('*').trigger('containerKeyDown', [event]);
      };
    })(this)).on('canvasRectSelect', (function(_this) {
      return function(event, rect) {
        return _this.boxesContainer.selectBoxesInRect(rect);
      };
    })(this)).on('boxSelected', (function(_this) {
      return function(event, box) {
        return _this.fontPanel.setSettingsFromStyle(box.element.get(0).style);
      };
    })(this));
    this.boxesContainer.bindEvents();
    this.canvas.bindEvents();
    this.grid.bindEvents();
    return this.fontPanel.bindEvents();
  };

  return EditArea;

})(Graphic);
