// Generated by CoffeeScript 1.7.1

/*
Graphic containing the settings to apply to boxes.
 */
var Panel,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Panel = (function(_super) {
  __extends(Panel, _super);

  function Panel(root) {
    this.root = root;
    this.prevOpacityVal = void 0;
    Panel.__super__.constructor.call(this, this.root);
  }

  Panel.prototype.buildElement = function() {
    return this.element = $('<div class="menu-sidebar"> <!-- Sidebar Right --> <div class="menu-tab-sidebar"> <div class="minimize-sidebar-btn shadow-effect"> <span class="minimize-text">&lt;&lt;</span> </div> <div class="menu-tab-pages"> </div> <div class="add-tab-sidebar-btn shadow-effect"> <span class="add-text">+</span> </div> </div> <div class="right-sidebar-container shadow-effect"> <!-- Row 1 Menu  --> <div class="right-sidebar-menu1"> <div class="moveElementUpBtn menu-panel-icon"></div> <div class="moveElementDownBtn menu-panel-icon"></div> <div class="addElementBtn menu-panel-icon"></div> </div> </div> </div>');
  };

  Panel.prototype.bindEvents = function() {
    this.element.find(".addElementBtn").click((function(_this) {
      return function() {
        return _this.element.trigger('panelClickAddBtnClick', [_this._getDisplayedTabIndex()]);
      };
    })(this));
    this.element.find('.moveElementUpBtn').click((function(_this) {
      return function() {
        return _this.element.trigger('moveElementUpBtnClick', [_this._getDisplayedTabIndex()]);
      };
    })(this));
    this.element.find('.moveElementDownBtn').click((function(_this) {
      return function() {
        return _this.element.trigger('moveElementDownBtnClick', [_this._getDisplayedTabIndex()]);
      };
    })(this));
    return this.element.find('.minimize-sidebar-btn').click((function(_this) {
      return function(event) {
        return _this.element.toggleClass('menu-sidebar-open');
      };
    })(this));
  };

  Panel.prototype.addNewTab = function() {
    return this.insertTab(this.element.find('.page-sidebar-tab').length);
  };

  Panel.prototype.insertTab = function(tabIndex) {
    var newPageIndex, rowContainer, tab;
    newPageIndex = Math.max(tabIndex, this.element.find('.page-sidebar-tab').length);
    tab = $('<a href="#ppedit-page-' + newPageIndex + '"> <div class="page-sidebar-tab menu-right-btn shadow-effect"> <span class="vertical-text">Page ' + (newPageIndex + 1) + '</span> </div> </a>');
    if (newPageIndex === 0) {
      this.element.find('.menu-tab-pages').append(tab);
    } else {
      tab.insertAfter(this.element.find('.menu-tab-pages a').eq(newPageIndex - 1));
    }
    tab.click((function(_this) {
      return function(event) {
        return _this._displayTab(newPageIndex);
      };
    })(this)).nextAll('a').each((function(_this) {
      return function(el, index) {
        $(el).attr('href', '#ppedit-page-' + (newPageIndex + index + 1)).html('<div class="page-sidebar-tab menu-right-btn shadow-effect"> <span class="vertical-text">Page ' + (newPageIndex + index + 2) + '</span> </div>').click(function() {
          return _this._displayTab(newPageIndex + index + 1);
        });
        return console.log(el);
      };
    })(this));
    rowContainer = $('<!-- Row 2 Menu --> <div class="ppedit-row-container"> <table class="right-sidebar-menu2" cellspacing="0px" cellpadding="2px"> </table> </div>');
    if (newPageIndex === 0) {
      this.element.find('.right-sidebar-container').append(rowContainer);
    } else {
      rowContainer.insertAfter(this.element.find('.ppedit-row-container').eq(newPageIndex - 1));
    }
    return this.element.find('.ppedit-row-container').removeClass('ppedit-row-container-active').eq(newPageIndex).addClass('ppedit-row-container-active');
  };


  /*
  Adds a row to be associated with the passed box id.
   */

  Panel.prototype.addBoxRow = function(tabIndex, boxid, index) {
    var newRow;
    newRow = $('<tr class="ppedit-panel-row"> <td style="width:10%"> <div class="deleteElementBtn menu-panel-icon"></div> </td> <td style="width:50%"> <input type="text" class="form-control" placeholder="Element 1"> </td> <td style="width:40%"> <div class="ppedit-slider"></div> </td> </tr>').attr('ppedit-box-id', boxid);
    if ((index == null) || index === 0) {
      this._getRowContainer(tabIndex).find('.right-sidebar-menu2').prepend(newRow);
    } else {
      newRow.insertBefore(this._getRowContainer(tabIndex).find('.ppedit-panel-row:nth-child("' + index + '")'));
    }
    newRow.find(".ppedit-slider").slider({
      min: 0,
      max: 100,
      step: 1,
      value: 100
    }).on('slideStart', (function(_this) {
      return function(event) {
        return _this.prevOpacityVal = $(event.target).val() || 100;
      };
    })(this)).on('slide', (function(_this) {
      return function(event) {
        var opacityVal;
        opacityVal = $(event.target).val();
        return $(event.target).trigger('onRowSliderValChanged', [tabIndex, boxid, parseInt(opacityVal) / 100]);
      };
    })(this)).on('slideStop', (function(_this) {
      return function(event) {
        var opacityStopVal;
        opacityStopVal = $(event.target).val();
        if (_this.prevOpacityVal !== opacityStopVal) {
          $(event.target).trigger('onRowSliderStopValChanged', [tabIndex, boxid, parseInt(_this.prevOpacityVal) / 100, parseInt(opacityStopVal) / 100]);
        }
        return _this.prevOpacityVal = void 0;
      };
    })(this));
    return newRow.find(".deleteElementBtn").on('click', (function(_this) {
      return function(event) {
        return $(event.target).trigger('onRowDeleteBtnClick', [tabIndex, boxid]);
      };
    })(this));
  };


  /*
  Removes the row associated with the passed box id.
   */

  Panel.prototype.removeBoxRow = function(boxId) {
    return this.getRowWithBoxId(boxId).remove();
  };


  /*
  Returns a selector matching the row associated with
  the passed box Id.
   */

  Panel.prototype.getRowWithBoxId = function(boxId) {
    return this.element.find("tr[ppedit-box-id=" + boxId + "]").eq(0);
  };


  /*
  Returns a selector matching the row at the specified index.
   */

  Panel.prototype.getRowAtIndex = function(tabIndex, index) {
    return this._getRowContainer(tabIndex).find(".ppedit-panel-row").eq(index);
  };


  /*
  Sets the name of the row.
   */

  Panel.prototype.setRowName = function(boxId, name) {
    return this.getRowWithBoxId(boxId).find('ppedit-rowName').val(name);
  };


  /*
  Returns a selector matching with all rows.
   */

  Panel.prototype.getRows = function(tabIndex) {
    return this._getRowContainer(tabIndex).find(".ppedit-panel-row");
  };

  Panel.prototype._displayTab = function(tabIndex) {
    return this.element.find('.ppedit-row-container').removeClass('ppedit-row-container-active').eq(tabIndex).addClass('ppedit-row-container-active');
  };

  Panel.prototype.removeTab = function(tabIndex) {
    this._getRowContainer(tabIndex).remove();
    return this.element.find('.page-sidebar-tab').eq(tabIndex).remove();
  };

  Panel.prototype._getRowContainer = function(tabIndex) {
    return this.element.find('.ppedit-row-container').eq(tabIndex);
  };

  Panel.prototype._getDisplayedRowContainer = function() {
    return this.element.find('.ppedit-row-container-active').eq(0);
  };

  Panel.prototype._getDisplayedTabIndex = function() {
    return this._getDisplayedRowContainer().index() - 1;
  };

  return Panel;

})(Graphic);
