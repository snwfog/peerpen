// Generated by CoffeeScript 1.7.1

/*
Graphic acting a the main container of the PPEditor.
 */
var PPEditor,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PPEditor = (function(_super) {
  __extends(PPEditor, _super);

  PPEditor.INIT_NUM_OF_PAGES = 2;

  function PPEditor(root) {
    this.root = root;
    PPEditor.__super__.constructor.call(this, this.root);
    this.clipboard = new Clipboard;
    this.commandManager = new CommandManager;
    this.cmdFactory = new CommandFactory;
    this.fontPanel = void 0;
    this.controller = void 0;
    this.panel = void 0;
  }

  PPEditor.prototype.buildElement = function() {
    this.element = $('<div class="container" tabindex="0"> </div>');
    this.controller = ControllerFactory.getController(this.element);
    this.superContainer = $('<div class="superContainer"> </div>');
    this.areas = [];
    this.panel = new Panel(this.element);
    this.mainPanel = new MainPanel(this.element);
    this.fontPanel = new FontPanel(this.element);
    this.panel.buildElement();
    this.mainPanel.buildElement();
    this.fontPanel.buildElement();
    this.element.append(this.mainPanel.element);
    this.element.append(this.panel.element);
    this.element.append(this.superContainer);
    return this.element.append(this.fontPanel.element);
  };

  PPEditor.prototype.bindEvents = function() {
    var cmd, i, _i, _ref, _results;
    this.element.on('requestUndo', (function(_this) {
      return function(event) {
        return _this.commandManager.undo();
      };
    })(this)).on('requestRedo', (function(_this) {
      return function(event) {
        return _this.commandManager.redo();
      };
    })(this)).on('requestDelete', (function(_this) {
      return function(event) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = PPEditor.INIT_NUM_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (_this.areas[i].boxesContainer.getSelectedBoxes().length !== 0) {
            _results.push(_this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, i, _this.areas[0].boxesContainer.getSelectedBoxes())));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    })(this)).on('requestCopy', (function(_this) {
      return function(event) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = PPEditor.INIT_NUM_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (_this.areas[i].boxesContainer.getSelectedBoxes().length !== 0) {
            _this.clipboard.pushItems({
              pageNum: i,
              boxes: _this.areas[i].boxesContainer.getSelectedBoxes()
            });
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    })(this)).on('requestPaste', (function(_this) {
      return function(event) {
        var items;
        items = _this.clipboard.popItems();
        if ((items.boxes != null) && items.boxes.length > 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createCopyBoxesCommand(_this, items.pageNum, items.boxes));
        }
      };
    })(this)).on('textColorChanged', (function(_this) {
      return function(event, hex) {
        var boxSelected;
        boxSelected = _this.getSelectedBoxes();
        if (boxSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeTextColorCommand(_this, _this.getPageNum(boxSelected), _this.areas[0].boxesContainer.getSelectedBoxes(), hex));
        }
      };
    })(this)).on('graphicContentChanged', (function(_this) {
      return function(event, params) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateChangeBoxContentCommand(params.graphic, params.prevContent, params.newContent), false);
      };
    })(this)).on('boxMoved', (function(_this) {
      return function(event, box, currentPosition, originalPosition) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createMoveBoxCommand(box, currentPosition, originalPosition), false);
      };
    })(this)).on('moveElementUpBtnClick', (function(_this) {
      return function(event, tabIndex) {
        var boxes;
        boxes = _this.getSelectedBoxes();
        if (boxes.length > 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createMoveUpCommand(_this, tabIndex, boxes));
        }
      };
    })(this)).on('moveElementDownBtnClick', (function(_this) {
      return function(event, tabIndex) {
        var boxes;
        boxes = _this.getSelectedBoxes();
        if (boxes.length > 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createMoveDownCommand(_this, tabIndex, boxes));
        }
      };
    })(this)).on('panelClickAddBtnClick', (function(_this) {
      return function(event, tabIndex) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateBoxesCommand(_this, tabIndex));
      };
    })(this)).on('panelClickGridBtnClick', (function(_this) {
      return function(event) {
        var area, _i, _len, _ref, _results;
        _ref = _this.areas;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          area = _ref[_i];
          _results.push(area.grid.toggleGrid());
        }
        return _results;
      };
    })(this)).on('onRowDeleteBtnClick', (function(_this) {
      return function(event, tabIndex, boxId) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, tabIndex, _this.root.find('#' + boxId)));
      };
    })(this)).on('onRowSliderValChanged', (function(_this) {
      return function(event, tabIndex, boxId, opacityVal) {
        return _this.areas[tabIndex].boxesContainer.changeBoxOpacity(boxId, opacityVal);
      };
    })(this)).on('onRowSliderStopValChanged', (function(_this) {
      return function(event, tabIndex, boxId, prevVal, newVal) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeOpacityCommand(_this, tabIndex, boxId, prevVal, newVal));
      };
    })(this)).on('addBoxRequested', (function(_this) {
      return function(event, boxCssOptions) {
        var pageNum;
        pageNum = _this.getPageNum($(event.target));
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateBoxesCommand(_this, pageNum, [boxCssOptions]));
      };
    })(this)).on('fontTypeChanged', (function(_this) {
      return function(event, newFontType) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontTypeCommand(_this, boxesSelected, newFontType));
        }
      };
    })(this)).on('fontSizeChanged', (function(_this) {
      return function(event, newFontSize) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontSizeCommand(_this, boxesSelected, newFontSize));
        }
      };
    })(this)).on('fontWeightBtnEnableClick', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontWeightCommand(_this, boxesSelected, true));
        }
      };
    })(this)).on('fontWeightBtnDisableClick', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontWeightCommand(_this, boxesSelected, false));
        }
      };
    })(this)).on('fontUnderlinedBtnEnableClick', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeUnderlineFontCommand(_this, boxesSelected, true));
        }
      };
    })(this)).on('fontUnderlinedBtnDisableClick', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeUnderlineFontCommand(_this, boxesSelected, false));
        }
      };
    })(this)).on('fontItalicBtnEnableClick', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeItalicFontCommand(_this, boxesSelected, true));
        }
      };
    })(this)).on('fontItalicBtnDisableClick', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeItalicFontCommand(_this, boxesSelected, false));
        }
      };
    })(this)).on('rightAlignment', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createRightAlignmentCommand(_this, boxesSelected));
        }
      };
    })(this)).on('leftAlignment', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createLeftAlignmentCommand(_this, boxesSelected));
        }
      };
    })(this)).on('centerAlignment', (function(_this) {
      return function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createCenterAlignmentCommand(_this, boxesSelected));
        }
      };
    })(this)).on('bulletPointBtnEnableClick', (function(_this) {
      return function(event) {
        var box, boxes, boxesSelected, id, pageNum, _results;
        boxesSelected = _this.getSelectedBoxes();
        pageNum = _this.getPageNum(boxesSelected);
        boxes = _this.areas[pageNum].boxesContainer.getBoxesFromSelector(boxesSelected.eq(0));
        _results = [];
        for (id in boxes) {
          box = boxes[id];
          _results.push(box.addBulletPoint());
        }
        return _results;
      };
    })(this)).on('orderedPointBtnEnableClick', (function(_this) {
      return function(event) {
        var box, boxes, boxesSelected, id, pageNum, _results;
        boxesSelected = _this.getSelectedBoxes();
        pageNum = _this.getPageNum(boxesSelected);
        boxes = _this.areas[pageNum].boxesContainer.getBoxesFromSelector(boxesSelected.eq(0));
        _results = [];
        for (id in boxes) {
          box = boxes[id];
          _results.push(box.addOrderedPointList());
        }
        return _results;
      };
    })(this));
    this.panel.bindEvents();
    this.fontPanel.bindEvents();
    this.controller.bindEvents();
    this.mainPanel.bindEvents();
    _results = [];
    for (i = _i = 0, _ref = PPEditor.INIT_NUM_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      cmd = this.cmdFactory.createAddPageCommand(this);
      _results.push(cmd.execute());
    }
    return _results;
  };


  /*
  Returns a selector to the currently selected boxes
   */

  PPEditor.prototype.getSelectedBoxes = function() {
    return this.element.find('.ppedit-box:focus, .ppedit-box-selected, .ppedit-box-focus');
  };

  PPEditor.prototype.getPageNum = function(boxSelector) {
    return boxSelector.parents('.editContainer').index();
  };


  /*
  Populates the editor with the boxes
  information defined in the passed json string.

  @param [String] jsonBoxes the JSON-formatted string containing
  the boxes information, this parameter look like the following :
  [
    {
      "box-id-1":'<div class="ppedit-box">box-id-1 contents in page 1</div>',
      "box-id-2":'<div class="ppedit-box">box-id-2 contents in page 1</div>'
    },
    {
      "box-id-3":'<div class="ppedit-box">box-id-1 contents in page 2</div>',
      "box-id-4":'<div class="ppedit-box">box-id-2 contents in page 2</div>'
    }
  ]
   */

  PPEditor.prototype.load = function(jsonBoxes) {
    var command;
    command = this.cmdFactory.createLoadBoxesCommand(this, jsonBoxes);
    return command.execute();
  };


  /*
  Returns a JSON string containing a description of
  all the boxes currently existing in the editor.
   */

  PPEditor.prototype.getAllHunks = function() {
    var area;
    return JSON.stringify((function() {
      var _i, _len, _ref, _results;
      _ref = this.areas;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        _results.push(this.area.boxesContainer.getAllHunks());
      }
      return _results;
    }).call(this));
  };

  return PPEditor;

})(Graphic);
