// Generated by CoffeeScript 1.7.1

/*
A command that creates one or more boxes with the passed options
ands adds it to the list.
 */
var CreateBoxesCommand,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CreateBoxesCommand = (function(_super) {
  __extends(CreateBoxesCommand, _super);


  /*
  Creates a command that, when executed, will create
  one or more boxes with a passed array of options, one
  for each box to create and add it to the list of current boxes.
  If no optionsList is passed, only one box is created with the default options.
   */

  function CreateBoxesCommand(editor, pageNum, optionsList) {
    this.editor = editor;
    this.pageNum = pageNum;
    this.optionsList = optionsList;
    CreateBoxesCommand.__super__.constructor.call(this);
    this.boxes = [];
  }

  CreateBoxesCommand.prototype.execute = function() {
    var box, options, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (this.optionsList != null) {
      if (this.boxes.length === 0) {
        _ref = this.optionsList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          options = _ref[_i];
          this.boxes.push(new Box(this.editor.areas[this.pageNum].boxesContainer.element, options));
        }
      }
      _ref1 = this.boxes;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        box = _ref1[_j];
        _results.push(this._addBox(box));
      }
      return _results;
    } else {
      if (this.boxes.length === 0) {
        this.boxes.push(new Box(this.editor.areas[this.pageNum].boxesContainer.element));
      }
      return this._addBox(this.boxes[0]);
    }
  };

  CreateBoxesCommand.prototype.undo = function() {
    var box, _i, _len, _ref, _results;
    _ref = this.boxes;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      box = _ref[_i];
      this.editor.areas[this.pageNum].boxesContainer.removeBoxes([box.element.attr('id')]);
      _results.push(this.editor.panel.removeBoxRow([box.element.attr('id')]));
    }
    return _results;
  };


  /*
  Adds the passed box to the boxcontainer and
  create a corresponding row in the panel
   */

  CreateBoxesCommand.prototype._addBox = function(box) {
    var boxId;
    this.editor.areas[this.pageNum].boxesContainer.addBox(box);
    boxId = box.element.attr('id');
    this.editor.panel.addBoxRow(this.pageNum, boxId);
    if (this.boxIds.indexOf(boxId) === -1) {
      return this.boxIds.push(boxId);
    }
  };

  CreateBoxesCommand.prototype.getType = function() {
    return 'Create';
  };

  CreateBoxesCommand.prototype.getPageNum = function() {
    return this.pageNum;
  };

  return CreateBoxesCommand;

})(Command);
